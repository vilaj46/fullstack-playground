networks:
  backend:
    driver: bridge

services:
  frontend:
    container_name: frontend
    image: frontend
    build:
      context: ./fsp-frontend
      dockerfile: frontend.DockerFile
      target: dev
    ports:
      - 3000:3000
    env_file:
      - ./fsp-frontend/.env
    restart: always
    depends_on:
      - backend
    develop:
      watch:
        - action: sync
          path: ./fsp-frontend/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
        - action: rebuild
          path: ./shared
    networks:
      - backend
    volumes:
      - ./shared:/app/shared
  backend:
    networks: 
      - backend
    container_name: backend
    image: backend
    build:
      context: ./fsp-backend
      dockerfile: backend.DockerFile
    ports:
      - 8080:8080
    env_file:
      - ./fsp-backend/.env
    depends_on:
      db:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: sync
          path: ./fsp-backend/src
          target: /app/fsp-backend/src
          ignore: 
            - node_modules/
        - action: sync
          path: ./fsp-backend/public-cdn      
          target: /app/fsp-backend/public-cdn
        - action: rebuild
          path: package.json
        - action: rebuild
          path: ./shared
    volumes:
      - ./shared:/app/shared  
  db:
    networks:
      - backend
    container_name: db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d fsp-db" ]
      interval: 15s
      retries: 10
      start_period: 30s
      timeout: 10s
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fsp-db
    volumes:
      - psql:/var/lib/postgresql/data
    ports:
      - 5432:5432
  redis:
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    restart: always
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "your-strong-password"]
      
volumes:
  psql:
  redis-data:

      